}
hist(np, breaks=4)
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = nichols.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = friston.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
np <- c()
j <- 1
for (file in dir()[grep("_cmc.txt", dir())]) {
#print(file)
M <-read_tsv(file,
col_names = VOIs,
col_types = cols(
Action = col_double(),
LTM = col_double(),
Perception = col_double(),
Procedural = col_double(),
WM = col_double()
))
np <- c(np, min(VARselect(M)$selection))
gm <- VAR(M, p = 1)
# Create To/From matrices
E <- matrix(rep(0, R*R), nrow=R)
P <- matrix(rep(0, R*R), nrow=R)
coef <- coefficients(gm)
for (v in 1:R) {
voi <- VOIs[v]
E[,v] <- coef[[v]][,1][1:R]  # estimates
P[,v] <- coef[[v]][,4][1:R]  # p-values
}
# Save
V <- c(P)
SP[j,] <- V
j <- j+1
}
hist(np, breaks=4)
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = friston.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
np <- c()
j <- 1
for (file in dir()[grep("_cmc.txt", dir())]) {
#print(file)
M <-read_tsv(file,
col_names = VOIs,
col_types = cols(
Action = col_double(),
LTM = col_double(),
Perception = col_double(),
Procedural = col_double(),
WM = col_double()
))
np <- c(np, min(VARselect(M)$selection))
gm <- VAR(M, p = 6)
# Create To/From matrices
E <- matrix(rep(0, R*R), nrow=R)
P <- matrix(rep(0, R*R), nrow=R)
coef <- coefficients(gm)
for (v in 1:R) {
voi <- VOIs[v]
E[,v] <- coef[[v]][,1][1:R]  # estimates
P[,v] <- coef[[v]][,4][1:R]  # p-values
}
# Save
V <- c(P)
SP[j,] <- V
j <- j+1
}
hist(np, breaks=4)
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = friston.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = nichols.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
hist(SP)
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = nichols.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = nichols.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
tippet.test <- function(pvals) {
s <- min(pvals)
1 - (1-s)**length(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = nichols.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
tippet.test <- function(pvals) {
s <- min(pvals)
1 - (1-s)**length(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = tippet.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
finalP
gm
names(gm)
gm$p
gm$varresult
SP
sign(SP-0.05/25)
sSP <- sign(SP-0.05/25)
asSP  <- apply(sSP, MARGIN = 2, FUN = Mode)
Mode <- function(codes){
which.max(tabulate(codes))
}
fisher.chi <- function(pvals) {
logsum <- -2 * sum(log(pvals))
1 - pchisq(logsum, df = (2 * length(pvals)))
}
friston.test <- function(pvals) {
max(pvals) ** length(pvals)
}
nichols.test <- function(pvals) {
max(pvals)
}
tippet.test <- function(pvals) {
s <- min(pvals)
1 - (1-s)**length(pvals)
}
finalP <- apply(SP, MARGIN = 2, FUN = tippet.test)
image(matrix(finalP, nrow = 5))
image(sign(matrix(finalP, nrow=5) - 0.05))
asSP <- apply(sSP, MARGIN = 2, FUN = Mode)
asSP
sSP <- sign(SP-0.05/10)
asSP <- apply(sSP, MARGIN = 2, FUN = Mode)
asSP
sSP <- sign(SP-0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = Mode)
asSP
sSP
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
asSP
matrix(sign(asSP), nrow=5)
CMC <- matrix(sign(asSP), nrow=5)
image(CMC)
?image
library(viridis)
viridis(10)
image(CMC, col=viridis(3))
image(CMC, col=viridis(2))
image(CMC, col=viridis(10))
image(CMC, col=viridis(2))
image(CMC, col=plasma(2))
matrix(asSP, nrow=5)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
image(architecture)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
image(architecture)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
np <- c()
j <- 1
for (sub in dir()[grep("sub-", dir())]) {
#print(file)
M <-read_tsv(cmc.txt,
col_names = VOIs,
col_types = cols(
Action = col_double(),
LTM = col_double(),
Perception = col_double(),
Procedural = col_double(),
WM = col_double()
))
np <- c(np, min(VARselect(M)$selection))
gm <- VAR(M, p = 6)
# Create To/From matrices
E <- matrix(rep(0, R*R), nrow=R)
P <- matrix(rep(0, R*R), nrow=R)
coef <- coefficients(gm)
for (v in 1:R) {
voi <- VOIs[v]
E[,v] <- coef[[v]][,1][1:R]  # estimates
P[,v] <- coef[[v]][,4][1:R]  # p-values
}
# Save
V <- c(P)
SP[j,] <- V
j <- j+1
}
np <- c()
j <- 1
for (sub in dir()[grep("sub-", dir())]) {
#print(file)
M <-read_tsv("cmc.txt",
col_names = VOIs,
col_types = cols(
Action = col_double(),
LTM = col_double(),
Perception = col_double(),
Procedural = col_double(),
WM = col_double()
))
np <- c(np, min(VARselect(M)$selection))
gm <- VAR(M, p = 6)
# Create To/From matrices
E <- matrix(rep(0, R*R), nrow=R)
P <- matrix(rep(0, R*R), nrow=R)
coef <- coefficients(gm)
for (v in 1:R) {
voi <- VOIs[v]
E[,v] <- coef[[v]][,1][1:R]  # estimates
P[,v] <- coef[[v]][,4][1:R]  # p-values
}
# Save
V <- c(P)
SP[j,] <- V
j <- j+1
}
np <- c()
j <- 1
for (sub in dir()[grep("sub-", dir())]) {
#print(file)
M <-read_tsv(paste(sub, "cmc.txt", sep="/"),
col_names = VOIs,
col_types = cols(
Action = col_double(),
LTM = col_double(),
Perception = col_double(),
Procedural = col_double(),
WM = col_double()
))
np <- c(np, min(VARselect(M)$selection))
gm <- VAR(M, p = 6)
# Create To/From matrices
E <- matrix(rep(0, R*R), nrow=R)
P <- matrix(rep(0, R*R), nrow=R)
coef <- coefficients(gm)
for (v in 1:R) {
voi <- VOIs[v]
E[,v] <- coef[[v]][,1][1:R]  # estimates
P[,v] <- coef[[v]][,4][1:R]  # p-values
}
# Save
V <- c(P)
SP[j,] <- V
j <- j+1
}
hist(np, breaks=4)
np <- c()
j <- 1
for (sub in dir()[grep("sub-", dir())]) {
#print(file)
M <-read_tsv(paste(sub, "cmc.txt", sep="/"),
col_names = VOIs,
col_types = cols(
Action = col_double(),
LTM = col_double(),
Perception = col_double(),
Procedural = col_double(),
WM = col_double()
))
np <- c(np, min(VARselect(M)$selection))
gm <- VAR(M, p = 2)
# Create To/From matrices
E <- matrix(rep(0, R*R), nrow=R)
P <- matrix(rep(0, R*R), nrow=R)
coef <- coefficients(gm)
for (v in 1:R) {
voi <- VOIs[v]
E[,v] <- coef[[v]][,1][1:R]  # estimates
P[,v] <- coef[[v]][,4][1:R]  # p-values
}
# Save
V <- c(P)
SP[j,] <- V
j <- j+1
}
hist(np, breaks=4)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
np <- c()
j <- 1
for (sub in dir()[grep("sub-", dir())]) {
#print(file)
M <-read_tsv(paste(sub, "cmc.txt", sep="/"),
col_names = VOIs,
col_types = cols(
Action = col_double(),
LTM = col_double(),
Perception = col_double(),
Procedural = col_double(),
WM = col_double()
))
np <- c(np, min(VARselect(M)$selection))
gm <- VAR(M, p = 1)
# Create To/From matrices
E <- matrix(rep(0, R*R), nrow=R)
P <- matrix(rep(0, R*R), nrow=R)
coef <- coefficients(gm)
for (v in 1:R) {
voi <- VOIs[v]
E[,v] <- coef[[v]][,1][1:R]  # estimates
P[,v] <- coef[[v]][,4][1:R]  # p-values
}
# Save
V <- c(P)
SP[j,] <- V
j <- j+1
}
hist(np, breaks=4)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.01)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.025)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.03)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
np <- c()
j <- 1
for (sub in dir()[grep("sub-", dir())]) {
#print(file)
M <-read_tsv(paste(sub, "cmc.txt", sep="/"),
col_names = VOIs,
col_types = cols(
Action = col_double(),
LTM = col_double(),
Perception = col_double(),
Procedural = col_double(),
WM = col_double()
))
minp <- min(VARselect(M)$selection)
np <- c(np, minp)
gm <- VAR(M, p = minp)
# Create To/From matrices
E <- matrix(rep(0, R*R), nrow=R)
P <- matrix(rep(0, R*R), nrow=R)
coef <- coefficients(gm)
for (v in 1:R) {
voi <- VOIs[v]
E[,v] <- coef[[v]][,1][1:R]  # estimates
P[,v] <- coef[[v]][,4][1:R]  # p-values
}
# Save
V <- c(P)
SP[j,] <- V
j <- j+1
}
hist(np, breaks=4)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.02)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.01)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.1)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.075)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.07)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.06)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.065)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
sSP <- sign(SP - 0.05)
asSP <- apply(sSP, MARGIN = 2, FUN = sum)
architecture <- matrix(sign(asSP), nrow=5)
architecture[architecture == 1] <- NA
image(architecture)
